"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PhonyDataUs = void 0;
const __1 = require("..");
const given_names_female_1 = require("./us-data/given-names-female");
const given_names_male_1 = require("./us-data/given-names-male");
const random_generator_1 = require("../generator/random-generator");
const state_code_to_state_1 = require("./us-data/state-code-to-state");
const street_directions_1 = require("./us-data/street-directions");
const street_name_prefixes_1 = require("./us-data/street-name-prefixes");
const street_names_1 = require("./us-data/street-names");
const street_name_suffixes_1 = require("./us-data/street-name-suffixes");
const surnames_1 = require("./us-data/surnames");
const state_city_population_zips_1 = require("./us-data/state-city-population-zips");
const weighted_generator_1 = require("../generator/weighted-generator");
const stateToCityInfo = new Map();
for (const stateCityPopulationZip of state_city_population_zips_1.stateCityPopulationZips) {
    const [stateCode, cityName, populationString, ...zips] = stateCityPopulationZip.split('|');
    const population = +populationString;
    const cities = stateToCityInfo.get(stateCode) || [];
    cities.push({
        cityName,
        population,
        generator: (0, random_generator_1.randomGenerator)(zips),
    });
    stateToCityInfo.set(stateCode, cities);
}
const weightedStateCodeData = [];
const cityGeneratorByState = new Map();
const zipGeneratorByStateCity = new Map();
for (const [stateCode, cities] of stateToCityInfo) {
    const population = cities.reduce((acc, next) => acc + next.population, 0);
    const cityList = cities.map(city => [
        city.population,
        city.cityName,
    ]);
    weightedStateCodeData.push([population, stateCode]);
    cityGeneratorByState.set(stateCode, (0, weighted_generator_1.weightedGenerator)(cityList));
    const zipGeneratorByCity = new Map();
    zipGeneratorByStateCity.set(stateCode, zipGeneratorByCity);
    for (const city of cities) {
        zipGeneratorByCity.set(city.cityName, city.generator);
    }
}
const weightedStateCodeGenerator = (0, weighted_generator_1.weightedGenerator)(weightedStateCodeData);
class PhonyDataUs extends __1.PhonyData {
}
exports.PhonyDataUs = PhonyDataUs;
const define = __1.defineForObject.bind(null, PhonyDataUs.prototype);
define('givenNameFemale', given_names_female_1.givenNamesFemale);
define('givenNameMale', given_names_male_1.givenNamesMale);
define('locality', function () {
    const stateCode = weightedStateCodeGenerator.call(this);
    const cityGenerator = cityGeneratorByState.get(stateCode);
    const zipGeneratorByCity = zipGeneratorByStateCity.get(stateCode);
    let cityName = '';
    let zipCode = '';
    if (cityGenerator) {
        cityName = cityGenerator.call(this);
    }
    if (zipGeneratorByCity) {
        const zipGenerator = zipGeneratorByCity.get(cityName);
        if (zipGenerator) {
            zipCode = zipGenerator.call(this);
        }
    }
    return {
        addressLine1: this.buildingNumber + ' ' + this.streetName,
        city: cityName,
        stateOrProvince: state_code_to_state_1.stateCodeToState[stateCode],
        stateOrProvinceCode: stateCode,
        postCode: zipCode,
    };
});
define('phoneNumber', function () {
    return this.integer(2, 9).toString(10) + this.format('##-###-####');
});
define('postCode', function () {
    return this.locality.postCode;
});
define('streetName', function () {
    let result = '';
    if (this.random <= 0.01) {
        result +=
            street_name_prefixes_1.streetNamePrefixes[this.index(street_name_prefixes_1.streetNamePrefixes.length)] + ' ';
    }
    result += street_names_1.streetNames[this.index(street_names_1.streetNames.length)];
    if (this.random <= 0.8) {
        result +=
            ' ' + street_name_suffixes_1.streetNameSuffixes[this.index(street_name_suffixes_1.streetNameSuffixes.length)];
    }
    if (this.random <= 0.1) {
        result += ' ' + street_directions_1.streetDirections[this.index(street_directions_1.streetDirections.length)];
    }
    return result;
});
define('surname', surnames_1.surnames);
