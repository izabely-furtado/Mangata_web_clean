"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.functions = void 0;
const __1 = require("..");
function functions() {
    (0, __1.define)('dateFormat', function (format, date) {
        function pad(n) {
            const s = n.toString();
            if (s.length < 2) {
                return `0${s}`;
            }
            return s;
        }
        if (!(date instanceof Date)) {
            date = this.date;
        }
        // Avoid using these characters because they are already used in ISO
        // 8601: W, T, Z
        return format
            .toString()
            .replace(/YYYY/, date.getUTCFullYear().toString())
            .replace(/MM/, pad(date.getUTCMonth() + 1))
            .replace(/DD/, pad(date.getUTCDate()))
            .replace(/hh/, pad(date.getUTCHours()))
            .replace(/mm/, pad(date.getUTCMinutes()))
            .replace(/ss/, pad(date.getUTCSeconds()));
    });
    (0, __1.define)('format', function (format) {
        const typedPhonyData = this;
        return format.toString().replace(/./g, letter => {
            const mapped = this._formatMap.get(letter);
            if (!mapped) {
                return letter;
            }
            return typedPhonyData[`_${mapped}`]();
        });
    });
    (0, __1.define)('parse', function (format) {
        const typedPhonyData = this;
        return format.toString().replace(/\{\{(.*?)\}\}/g, (match, grab) => {
            const elements = grab.replace(/\s*/g, '').split('|');
            return elements.reduce((acc, item) => {
                try {
                    return typedPhonyData['_' + item](acc);
                }
                catch (e) {
                    return e.toString();
                }
            }, null);
        });
    });
}
exports.functions = functions;
